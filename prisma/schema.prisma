// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model thorn_settings {
    id    Int    @id @default(autoincrement())
    name  String
    value String
}

model thorn_authorized {
    discordId     String   @id
    minecraftUUID String
    authorizedAt  DateTime @default(now())
    authorizedBy  String   @default("00000000000000000")
}

// This is really messy, but it's not my choice; this is copied directly from the Litebans schema :c

model litebans_bans {
    id                Int       @id @default(autoincrement())
    uuid              String
    ip                String?
    reason            String
    banned_by_uuid    String
    banned_by_name    String
    removed_by_uuid   String?
    removed_by_name   String?
    removed_by_reason String?
    removed_by_date   DateTime? @default(now())
    time              BigInt
    until             BigInt    @default(0)
    template          Int
    server_scope      String
    server_origin     String
    silent            Boolean   @default(false)
    ipban             Boolean   @default(false)
    ipban_wildcard    Boolean   @default(false)
    active            Boolean   @default(true)
}

model litebans_kicks {
    id             Int     @id @default(autoincrement())
    uuid           String
    ip             String?
    reason         String
    banned_by_uuid String
    banned_by_name String
    time           BigInt
    until          BigInt  @default(0)
    template       Int
    server_scope   String
    server_origin  String
    silent         Boolean @default(false)
    ipban          Boolean @default(false)
    ipban_wildcard Boolean @default(false)
    active         Boolean @default(true)
}

model litebans_mutes {
    id                Int       @id @default(autoincrement())
    uuid              String
    ip                String?
    reason            String
    banned_by_uuid    String
    banned_by_name    String
    removed_by_uuid   String?
    removed_by_name   String?
    removed_by_reason String?
    removed_by_date   DateTime? @default(now())
    time              BigInt
    until             BigInt    @default(0)
    template          Int
    server_scope      String
    server_origin     String
    silent            Boolean   @default(false)
    ipban             Boolean   @default(false)
    ipban_wildcard    Boolean   @default(false)
    active            Boolean   @default(true)
}

model litebans_warnings {
    id                Int       @id @default(autoincrement())
    uuid              String
    ip                String?
    reason            String
    banned_by_uuid    String
    banned_by_name    String
    removed_by_uuid   String?
    removed_by_name   String?
    removed_by_reason String?
    removed_by_date   DateTime? @default(now())
    time              BigInt
    until             BigInt    @default(0)
    template          Int
    server_scope      String
    server_origin     String
    silent            Boolean   @default(false)
    ipban             Boolean   @default(false)
    ipban_wildcard    Boolean   @default(false)
    active            Boolean   @default(true)
    warned            Boolean
}

// Unused stuff to prevent data loss

model litebans_config {
    id       Int    @id @default(autoincrement())
    version  String
    build    String
    timezone String
}

model litebans_history {
    id   Int       @id @default(autoincrement())
    name String
    uuid String
    ip   String
    date DateTime? @default(now())
}

model litebans_servers {
    id   Int      @id @default(autoincrement())
    uuid String
    date DateTime @default(now())
    name String
}

model litebans_sync {
    id   Int      @id @default(autoincrement())
    info Int
    msg  String
    time DateTime @default(now())
}
